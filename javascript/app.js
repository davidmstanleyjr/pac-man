//Tells the browser the width of my grid is 28
document.addEventListener('DOMContentLoaded', () => {
	const grid = document.querySelector('.grid');
	const scoreDisplay = document.getElementById('score');
	const width = 28; //28 * 28 = 784 squares
	let score = 0;

	//this is for the grid layout and what's contained in the squares
	const layout = [
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		3,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		3,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		4,
		1,
		1,
		1,
		2,
		2,
		1,
		1,
		1,
		4,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		4,
		1,
		2,
		2,
		2,
		2,
		2,
		2,
		1,
		4,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		4,
		4,
		4,
		4,
		4,
		4,
		0,
		0,
		0,
		4,
		1,
		2,
		2,
		2,
		2,
		2,
		2,
		1,
		4,
		0,
		0,
		0,
		4,
		4,
		4,
		4,
		4,
		4,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		4,
		1,
		2,
		2,
		2,
		2,
		2,
		2,
		1,
		4,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		4,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		4,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		4,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		4,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		4,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		3,
		0,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		0,
		3,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1
	];

	const squares = [];

	//Legend
	//0 = pac-dot
	//1 = wall
	//2 = ghost-lair
	//3 = power-pellet
	//4 = empty

	//creates squares on the grid
	function createBoard() {
		for (let i = 0; i < layout.length; i++) {
			const square = document.createElement('div');
			grid.appendChild(square);
			squares.push(square);

			//layout logic
			if (layout[i] === 0) {
				squares[i].classList.add('pac-dot');
			} else if (layout[i] === 1) {
				squares[i].classList.add('wall');
			} else if (layout[i] === 2) {
				squares[i].classList.add('ghost-lair');
			} else if (layout[i] === 3) {
				squares[i].classList.add('power-pellet');
			}
		}
	}

	createBoard();

	//pac-man starting position

	let pacmanCurrentIndex = 490;

	squares[pacmanCurrentIndex].classList.add('pac-man');

	//this makes pac-man move
	function movePacman(e) {
		squares[pacmanCurrentIndex].classList.remove('pac-man');

		switch (e.keyCode) {
			case 37:
				if (
					pacmanCurrentIndex % width !== 0 &&
					!squares[pacmanCurrentIndex - 1].classList.contains('wall') &&
					!squares[pacmanCurrentIndex - 1].classList.contains('ghost-lair')
				)
					pacmanCurrentIndex -= 1;

				//this checks if pacman is in the left exit
				if (pacmanCurrentIndex - 1 === 363) {
					pacmanCurrentIndex = 391;
				}
				break;
			case 38:
				if (
					pacmanCurrentIndex - width >= 0 &&
					!squares[pacmanCurrentIndex - width].classList.contains('wall') &&
					!squares[pacmanCurrentIndex - width].classList.contains('ghost-lair')
				)
					pacmanCurrentIndex -= width;
				break;
			case 39:
				if (
					pacmanCurrentIndex % width < width - 1 &&
					!squares[pacmanCurrentIndex + 1].classList.contains('wall') &&
					!squares[pacmanCurrentIndex + 1].classList.contains('ghost-lair')
				)
					pacmanCurrentIndex += 1;

				//this checks for pacman in the right exit
				if (pacmanCurrentIndex + 1 === 392) {
					pacmanCurrentIndex = 364;
				}

				break;

			case 40:
				if (
					pacmanCurrentIndex + width < width * width &&
					!squares[pacmanCurrentIndex + width].classList.contains('wall') &&
					!squares[pacmanCurrentIndex + width].classList.contains('ghost-lair')
				)
					pacmanCurrentIndex += width;
				break;
		}

		squares[pacmanCurrentIndex].classList.add('pac-man');

		pacDotEaten();
		//pacDotEaten()
		//powerPelletEaten()
		//checkForGameOver()
		//checkForWIn()
	}

	document.addEventListener('keyup', movePacman);

	//if the square pacman is currently in contains a pacdot class, add 1 to the score. This is the logic for him eating.
	function pacDotEaten() {
		if (squares[pacmanCurrentIndex].classList.contains('pac-dot')) {
			score++;
			scoreDisplay.innerHTML = score;
			squares[pacmanCurrentIndex].classList.remove('pac-dot');
		}
	}

	//here i'm uing constructors to create ghosts
	class Ghost {
		constructor(className, startIndex, speed) {
			this.className = className;
			this.startIndex = startIndex;
			this.speed = speed;
			this.currentIndex = startIndex;
			this.timerId = NaN;
		}
	}

	ghosts = [
		new Ghost('blinky', 348, 250),
		new Ghost('pinky', 376, 400),
		new Ghost('inky', 351, 300),
		new Ghost('clyde', 379, 500)
	];

	//draw ghosts onto the grid
	ghosts.forEach((ghost) => {
		squares[ghost.currentIndex].classList.add(ghost.className);
		squares[ghost.currentIndex].classList.add('ghost');
	});
});
